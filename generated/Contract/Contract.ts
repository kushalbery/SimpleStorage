// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PeopleData extends ethereum.Event {
  get params(): PeopleData__Params {
    return new PeopleData__Params(this);
  }
}

export class PeopleData__Params {
  _event: PeopleData;

  constructor(event: PeopleData) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get _favoriteNumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__peopleResult {
  value0: BigInt;
  value1: string;

  constructor(value0: BigInt, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  nameToFavoriteNumber(param0: string): BigInt {
    let result = super.call(
      "nameToFavoriteNumber",
      "nameToFavoriteNumber(string):(uint256)",
      [ethereum.Value.fromString(param0)]
    );

    return result[0].toBigInt();
  }

  try_nameToFavoriteNumber(param0: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nameToFavoriteNumber",
      "nameToFavoriteNumber(string):(uint256)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  people(param0: BigInt): Contract__peopleResult {
    let result = super.call("people", "people(uint256):(uint256,string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new Contract__peopleResult(
      result[0].toBigInt(),
      result[1].toString()
    );
  }

  try_people(param0: BigInt): ethereum.CallResult<Contract__peopleResult> {
    let result = super.tryCall("people", "people(uint256):(uint256,string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__peopleResult(value[0].toBigInt(), value[1].toString())
    );
  }

  retrieve(): BigInt {
    let result = super.call("retrieve", "retrieve():(uint256)", []);

    return result[0].toBigInt();
  }

  try_retrieve(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("retrieve", "retrieve():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddPersonCall extends ethereum.Call {
  get inputs(): AddPersonCall__Inputs {
    return new AddPersonCall__Inputs(this);
  }

  get outputs(): AddPersonCall__Outputs {
    return new AddPersonCall__Outputs(this);
  }
}

export class AddPersonCall__Inputs {
  _call: AddPersonCall;

  constructor(call: AddPersonCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _favoriteNumber(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddPersonCall__Outputs {
  _call: AddPersonCall;

  constructor(call: AddPersonCall) {
    this._call = call;
  }
}

export class StoreCall extends ethereum.Call {
  get inputs(): StoreCall__Inputs {
    return new StoreCall__Inputs(this);
  }

  get outputs(): StoreCall__Outputs {
    return new StoreCall__Outputs(this);
  }
}

export class StoreCall__Inputs {
  _call: StoreCall;

  constructor(call: StoreCall) {
    this._call = call;
  }

  get _favoriteNumber(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StoreCall__Outputs {
  _call: StoreCall;

  constructor(call: StoreCall) {
    this._call = call;
  }
}
